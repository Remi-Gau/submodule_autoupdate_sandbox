name: update submodules

# requires sudmodules URL to be "https...""

on:
  push:
    branches:
      - main
      - master
      - dev

  # Uses the cron schedule for github actions
  #
  # https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#scheduled-events
  #
  #          ┌───────────── minute (0 - 59)
  #          │ ┌───────────── hour (0 - 23)
  #          │ │ ┌───────────── day of the month (1 - 31)
  #          │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  #          │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  #          │ │ │ │ │
  #          │ │ │ │ │
  #          │ │ │ │ │
  #          * * * * *

  schedule:
    - cron: "* * * * *"

  # to trigger update manually from the Action tab in github
  workflow_dispatch:
    inputs:
      log:
        description: "Log"
        required: false

env:
  # use
  SUBMOD_TO_UPDATE: "*"
  # when all submodules need to be updated and have the same upstream branch name
  # otherwise
  # SUBMOD_TO_UPDATE:
  #   - path": "lib/sub_1"
  #     branch": "master"
  #   - path: "lib/sub_2"
  #     branch: "main"

defaults:
  run:
    shell: bash

jobs:
  update_submodules:
    # only trigger update on upstream repo
    if: github.repository_owner == 'Remi-Gau'

    runs-on: ubuntu-latest

    steps:

      - name: Install datalad
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y install datalad

      - name: Clone repo
        uses: actions/checkout@v3
        with:
          submodules: true

      # https://stackoverflow.com/questions/5828324/update-git-submodule-to-latest-commit-on-origin
      - name: Update all submodules [WIP]
        if: ${{ env.SUBMOD_TO_UPDATE == '*' }}
        run: git submodule update --remote --merge # fatal: refusing to merge unrelated histories

        # run: git submodule foreach git pull # fatal: Need to specify how to reconcile divergent branches.

      # - name: Update some submodules # detached HEAD messes this up
      #   if: ${{ env.SUBMOD_TO_UPDATE == '*' }}
      #   run: |
      #         git submodule
      #         nb_submod=$(git submodule | wc -l)
      #         start_dir=$PWD
      #         for i in $(seq 1 ${nb_submod}); do
      #         path=$(git submodule | awk -v i=${i} '{if(NR==i) print $2}')
      #         branch=$(git submodule | awk -v i=${i} '{if(NR==i) print $3}' | cut -c 8- | rev | cut -c 2- | rev)
      #         echo ${path} ${branch}
      #         cd ${path}
      #         git checkout ${branch}
      #         git pull
      #         cd ${start_dir}
      #         done

      # - name: Update some submodules
      #   if: ${{ env.SUBMOD_TO_UPDATE == '*' }}
      #   run: datalad update -d . --merge -r -R 1

      # if there have been changes,
      # a PR is created using the checkout branch for this workflow
      # https://github.com/peter-evans/create-pull-request
      - name: Create Pull-Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Update submodules
          delete-branch: true

      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
