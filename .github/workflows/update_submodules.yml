name: update submodules

# requires sudmodules URL to be "https...""
# requires submodule to be specified to follow a specific branch (stored in .gitmodules)
# clone them with 
#  git submodule add -b branch_to_follow https://github.com/... path

  # Uses the cron schedule for github actions
  #
  # https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#scheduled-events
  #
  #          ┌───────────── minute (0 - 59)
  #          │ ┌───────────── hour (0 - 23)
  #          │ │ ┌───────────── day of the month (1 - 31)
  #          │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  #          │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  #          │ │ │ │ │
  #          │ │ │ │ │
  #          │ │ │ │ │
  #          * * * * *

on:
  push:
    branches:
      - main
      - master
      - dev
  schedule:
    - cron: "* * * * *"

  # to trigger update manually from the Action tab in github
  workflow_dispatch:
    inputs:
      log:
        description: "Log"
        required: false

env:
  # to update all submodules
  SUBMOD_TO_UPDATE: "*"
  # otherwise
  FOO: ["lib/sub_1", "lib/sub_2"]

defaults:
  run:
    shell: bash

jobs:
  update_submodules:
    # only trigger update on upstream repo
    if: github.repository_owner == 'Remi-Gau'

    runs-on: ubuntu-latest

    steps:

      - name: Clone repo
        uses: actions/checkout@v3
        with:
          submodules: true

      # https://stackoverflow.com/questions/5828324/update-git-submodule-to-latest-commit-on-origin
      - name: Update submodules
        if: ${{ env.SUBMOD_TO_UPDATE == '*' }}
        run: |
              git submodule
              nb_submod=$(git submodule | wc -l)
              start_dir=$PWD
              for i in $(seq 1 ${nb_submod}); do
              path=$(git submodule | awk -v i=${i} '{if(NR==i) print $2}')
              branch=$(git config --get --file .gitmodules submodule.${path}.branch)
              echo ${path} ${branch}
              cd ${path}
              git checkout ${branch}
              cd ${start_dir}
              done
              git submodule update --remote --merge

      # if there have been changes,
      # a PR is created using the checkout branch for this workflow
      # https://github.com/peter-evans/create-pull-request
      - name: Create Pull-Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Update submodules
          delete-branch: true
